name: Build Cockpit WireGuard Manager

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: |
          cd ui
          npm ci

      - name: Build frontend
        run: |
          cd ui
          npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ui/dist/
          retention-days: 7

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            name: linux-amd64
          - goos: linux
            goarch: arm64
            name: linux-arm64
          - goos: linux
            goarch: arm
            goarm: "7"
            name: linux-armv7
          # Windows builds (for development/testing)
          - goos: windows
            goarch: amd64
            name: windows-amd64
            ext: .exe
          # macOS builds (for development/testing)
          - goos: darwin
            goarch: amd64
            name: darwin-amd64
          - goos: darwin
            goarch: arm64
            name: darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: bridge/go.sum

      - name: Build backend
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CGO_ENABLED: 0
        run: |
          cd bridge
          go build -ldflags "-s -w -X main.version=${{ github.ref_name }}" \
            -o ../dist/wg-bridge-${{ matrix.name }}${{ matrix.ext }} .

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.name }}
          path: dist/wg-bridge-${{ matrix.name }}${{ matrix.ext }}
          retention-days: 7

  package:
    name: Package Cockpit Plugin
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    strategy:
      matrix:
        include:
          - target: linux-amd64
            name: "Linux x86_64"
          - target: linux-arm64
            name: "Linux ARM64"
          - target: linux-armv7
            name: "Linux ARMv7"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ui/dist/

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-${{ matrix.target }}
          path: dist/

      - name: Package plugin
        run: |
          mkdir -p dist/cockpit-wg-${{ matrix.target }}
          
          # Copy frontend files
          cp ui/manifest.json dist/cockpit-wg-${{ matrix.target }}/
          cp ui/dist/index.html dist/cockpit-wg-${{ matrix.target }}/
          cp -r ui/dist/assets dist/cockpit-wg-${{ matrix.target }}/
          
          # Copy backend binary
          cp dist/wg-bridge-${{ matrix.target }} dist/cockpit-wg-${{ matrix.target }}/wg-bridge
          chmod +x dist/cockpit-wg-${{ matrix.target }}/wg-bridge
          
          # Create tarball
          cd dist
          tar -czf cockpit-wg-${{ matrix.target }}.tar.gz cockpit-wg-${{ matrix.target }}/

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cockpit-wg-${{ matrix.target }}
          path: dist/cockpit-wg-${{ matrix.target }}.tar.gz
          retention-days: 30

  # Создание релиза при push тега
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all packages
        uses: actions/download-artifact@v4
        with:
          pattern: cockpit-wg-*
          path: dist/
          merge-multiple: true

      - name: Generate checksums
        run: |
          cd dist
          sha256sum *.tar.gz > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
            dist/checksums.txt
          body: |
            ## Cockpit WireGuard Manager ${{ github.ref_name }}
            
            ### Supported Platforms:
            - **Linux x86_64** - Standard 64-bit Intel/AMD systems
            - **Linux ARM64** - 64-bit ARM systems (Raspberry Pi 4, Apple M1, etc.)
            - **Linux ARMv7** - 32-bit ARM systems (Raspberry Pi 3, etc.)
            
            ### Installation:
            1. Download the appropriate package for your system
            2. Extract: `tar -xzf cockpit-wg-*.tar.gz`
            3. Install: `sudo cp -r cockpit-wg-*/ /usr/share/cockpit/cockpit-wg/`
            4. Restart Cockpit: `sudo systemctl restart cockpit`
            
            ### Changelog:
            - See commit history for detailed changes
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  # Тестирование на разных архитектурах
  test-multi-arch:
    name: Test Multi-Architecture
    runs-on: ubuntu-latest
    needs: [build-backend]
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Download backend
        uses: actions/download-artifact@v4
        with:
          name: backend-linux-${{ matrix.arch }}
          path: dist/

      - name: Test binary
        run: |
          chmod +x dist/wg-bridge-linux-${{ matrix.arch }}
          # Простая проверка что бинарь запускается
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            # Для x86_64 можем запустить напрямую
            timeout 5 ./dist/wg-bridge-linux-${{ matrix.arch }} --help || true
          else
            # Для ARM64 используем QEMU
            docker run --rm --platform=linux/${{ matrix.arch }} \
              -v $(pwd)/dist:/dist \
              alpine:latest /dist/wg-bridge-linux-${{ matrix.arch }} --help || true
          fi
